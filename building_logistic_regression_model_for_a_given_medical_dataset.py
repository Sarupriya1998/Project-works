# -*- coding: utf-8 -*-
"""Building Logistic Regression model for a given medical dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16YQ_3a_CZG8qCQDHopRAWWLN8Km1_bqI

You are given a categorical dataset – “Heart_Disease.csv.” Load the
dataset into a DataFrame. Considering the “TenYearCHD” column as the
target variable, perform the following tasks:
1. Explore the “Heart_Disease.csv” dataset, identify the null values and fill
them with the mean value of their respective columns
2. Split the data into test and train parts using train_test_split()
function in 80:20 ratio (80% train, 20% test)
3. Perform scaling of numeric data using the StandardScaler() function
4. Build a Logistic regression model using the test dataset and test the model
using the test dataset
5. Print the classification report of the model
6. Calculate the confusion matrix and plot the same using a heatmap
7. Calculate and print the accuracy score of the model
8. Print the decision boundary for θ = 0, θ = 1 and 2
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

heart_df=pd.read_csv("Heart_Disease.csv")
heart_df.head()

heart_df.describe()

heart_df.info()

"""**Identifying null values and filling them with mean of thier respective columns.**"""

heart_df.isnull().sum()

heart_df = heart_df.apply(lambda x: x.fillna(x.mean()),axis=0)

heart_df.isnull().sum()

"""**Finding uniqueness in each column.**"""

# unique values
heart_df.nunique()/heart_df.shape[0]

"""**Importing libraries for logistic regression.**"""

## importing packages

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix , classification_report,accuracy_score
from sklearn.metrics import roc_curve , auc
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler

"""**Defining input and output variable for test-train split.**"""

## Defining variables X,y 
X= heart_df.drop("TenYearCHD",axis=1)
y=heart_df["TenYearCHD"]
print("Columns in X :",X.columns)
print("y :",y)
print("shape of X:",X.shape)
print("shape of y:",y.shape[0])

"""**Splitting the data into test-train parts in a 80:20 ratio.**"""

## Splitting data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

import sys
print("After splitting the data-")
print("size of input train data is:", sys.getsizeof(X_train))
print("size of input test data is:", sys.getsizeof(X_test))
print("size of output train data is:", sys.getsizeof(y_train))
print("size of output test data is:", sys.getsizeof(y_test))

"""**Scaling the data using StandardScalar() function.**"""

# Scaling the data 
sc= StandardScaler()
X_train = sc.fit_transform(X_train)
X_test=sc.transform(X_test)
X_train=pd.DataFrame(X_train,columns=X.columns)
X_test=pd.DataFrame(X_test,columns=X.columns)

"""**Training the model using logistic regression.**"""

# Training the model using Logistic Regression
model=LogisticRegression()
model.fit(X_train,y_train)

"""**Testing the model using test dataset.**"""

## Predicting data
y_pred=model.predict(X_test)

"""**Printing the classification report.**"""

# classification report
print(classification_report(y_test,y_pred))

"""**Printing the confusion matrix.**"""

# confusion matrix
conf_mat=confusion_matrix(y_test,y_pred)
print("Confusion matrix is \n",conf_mat)

#plotting confusion matrix
plt.figure(figsize=(7,7))
plt.title("Logistic Regression Confusion Matrix")
sns.heatmap(conf_mat, square=True,cmap="BuPu",annot=True,fmt='d')
plt.xlabel('true label')
plt.ylabel('predicted label')

"""**Printing accuracy score.**"""

# accuracy score
print("accuracy score : ",accuracy_score(y_test,y_pred))

# percentage accurate
print("accuracy:", round(100*accuracy_score(y_test,y_pred)),"%")

"""**Printing the decision boundry.**"""

#For theta_0:
print(model.intercept_ )

#For theta_1 and theta_2:
print(model.coef_ )